# Create DEV Image Version 
name: Create DEV Image Version and Push ECR
on:
  workflow_dispatch:
    inputs:
      DEVIMAGEVERSION:
        description: 'DEV Image Version'
        type: string
        required: true

env:
  REPOSITORY: apha/bst
jobs:
  build-and-analyze:
    name: Build + Test + Sonar
    runs-on: windows-latest
    environment: DEV   # ðŸ‘ˆ restrict this job to DEV environment
    permissions:
      id-token: write
      contents: write
      pull-requests: write
    outputs:
      image_tag: ${{ steps.imgtag.outputs.image_tag }}
    steps:
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: zulu
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.ref_name }}
          
      # - name: Cache SonarQube Cloud packages
      #   uses: actions/cache@v4
      #   with:
      #     path: ~\sonar\cache
      #     key: ${{ runner.os }}-sonar
      #     restore-keys: ${{ runner.os }}-sonar
      # - name: Cache SonarQube Cloud scanner
      #   id: cache-sonar-scanner
      #   uses: actions/cache@v4
      #   with:
      #     path: .\.sonar\scanner
      #     key: ${{ runner.os }}-sonar-scanner
      #     restore-keys: ${{ runner.os }}-sonar-scanner

      # - name: Install SonarQube Cloud scanner
      #   if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
      #   shell: pwsh
      #   run: |
      #     New-Item -Path .\.sonar\scanner -ItemType Directory
      #     dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner
  
      # - name: Compose image tag
      #   id: imgtag
      #   shell: pwsh
      #   run: |
      #     $imageTag = "v${{ github.event.inputs.DEVIMAGEVERSION }}"
      #     "image_tag=$imageTag" >> $env:GITHUB_OUTPUT

      # - name: Print Docker image tag
      #   shell: pwsh
      #   run: |
      #     echo "Image Tag: ${{ steps.imgtag.outputs.image_tag }}"    

      - name: commit application release version in VERSION file
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if ! grep -Fxq "${{ github.event.inputs.DEVIMAGEVERSION }}" VERSION; then
            git config user.name "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            BRANCH="release/update-version-${{ github.event.inputs.DEVIMAGEVERSION }}-${{ github.run_id }}"
            git checkout -b "$BRANCH"
            echo "${{ github.event.inputs.DEVIMAGEVERSION }}" >| VERSION
            cat VERSION
            git add VERSION
            git commit -m "Update VERSION to ${{ github.event.inputs.DEVIMAGEVERSION }}"
            git push origin "$BRANCH"
            echo "BRANCH_NAME=$BRANCH" >> $GITUB_ENV
          else
            echo "VERSION file already contains ${{ github.event.inputs.DEVIMAGEVERSION }} â€” skipping commit"
            exit 1
          fi

      - name: Create Pull Request
        id: cpr 
        uses: peter-evans/create-pull-request@v7
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ env.BRANCH_NAME }}
          base: main
          title: "Release: Update VERSION to ${{ github.event.inputs.DEVIMAGEVERSION }}"
          body: "This PR updates the VERSION file to ${{ github.event.inputs.DEVIMAGEVERSION }}."    


  #     - name: Wait for approval (max 5 minutes)
  #       id: wait_for_approval
  #       shell: bash
  #       run: |
  #         pr_number=${{ steps.cpr.outputs.pull-request-number }}
  #         echo "Waiting up to 5 minutes for PR #$pr_number approval..."
  #         approved=false
  #         for i in {1..5}; do
  #           sleep 60
  #           reviews=$(gh pr view $pr_number --json reviews --jq '.reviews[].state' --repo ${{ github.repository }})
  #           echo "Current reviews: $reviews"
  #           if echo "$reviews" | grep -q "APPROVED"; then
  #             approved=true
  #             break
  #           fi
  #         done

  #         if [ "$approved" = "false" ]; then
  #           echo "No approval after 5 minutes. Closing PR."
  #           gh pr close $pr_number --delete-branch --repo ${{ github.repository }}
  #           exit 1
  #         fi

  #         echo "PR approved, proceeding..."
  #       env:
  #         GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  #     - name: Enable Auto-Merge
  #       if: steps.wait_for_approval.outcome == 'success'
  #       uses: peter-evans/enable-pull-request-automerge@v3
  #       with:
  #         token: ${{ secrets.GITHUB_TOKEN }}
  #         pull-request-number: ${{ steps.cpr.outputs.pull-request-number }}
  #         merge-method: squash          

  #     - name: Start Sonar Analysis
  #       shell: pwsh
  #       env:
  #         SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  #       run: |
  #         .\.sonar\scanner\dotnet-sonarscanner begin `
  #           /k:"DEFRA_apha-bst" `
  #           /o:"defra" `
  #           /d:sonar.token="$env:SONAR_TOKEN" `
  #           /d:sonar.host.url="https://sonarcloud.io" `
  #           /v:"${{ steps.imgtag.outputs.image_tag }}" `
  #           /d:sonar.cs.opencover.reportsPaths="src/TestResults/*.coverage.opencover.xml" `
  #           /d:sonar.cs.vstest.reportsPaths="src/TestResults/*.test_results.trx" `
  #           /d:sonar.branch.name="${{ github.ref_name }}" `
  #           /d:sonar.verbose=true `
  #           /d:sonar.exclusions="**/wwwroot/**" `
  #           /d:sonar.coverage.exclusions="**/wwwroot/**,**/*.cshtml"
  #     - name: Restore NuGet packages
  #       shell: pwsh
  #       run: dotnet restore src/Apha.BST.sln
  #     - name: Build Solution
  #       shell: pwsh
  #       run: dotnet build src/Apha.BST.sln --configuration Release
  #     - name: Run Unit Tests with Coverage
  #       shell: pwsh
  #       run: >
  #         dotnet test src/Apha.BST/Apha.BST.Application.UnitTests/Apha.BST.Application.UnitTests.csproj `
  #           --no-build --configuration Release /p:CollectCoverage=true `
  #           /p:CoverletOutput="$($PWD.Path)/src/TestResults/Apha.BST.Application.coverage.opencover.xml" `
  #           /p:CoverletOutputFormat=opencover `
  #           /p:Deterministic=true `
  #           /p:DebugType=full /p:DebugSymbols=true `
  #           --logger "trx;LogFileName=$($PWD.Path)/src/TestResults/Apha.BST.Application.test_results.trx"

  #         dotnet test src/Apha.BST/Apha.BST.Web.UnitTests/Apha.BST.Web.UnitTests.csproj `
  #           --no-build --configuration Release /p:CollectCoverage=true `
  #           /p:CoverletOutput="$($PWD.Path)/src/TestResults/Apha.BST.Web.coverage.opencover.xml" `
  #           /p:CoverletOutputFormat=opencover `
  #           /p:Deterministic=true `
  #           /p:DebugType=full /p:DebugSymbols=true `
  #           --logger "trx;LogFileName=$($PWD.Path)/src/TestResults/Apha.BST.Web.test_results.trx"
  #     - name: List coverage files
  #       shell: pwsh
  #       run: Get-ChildItem -Recurse -Filter "*.coverage.opencover.xml"; Get-ChildItem -Recurse -Filter "*.test_results.trx"
  #     - name: End Sonar Analysis
  #       shell: pwsh
  #       env:
  #         SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  #       run: .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.token="$env:SONAR_TOKEN"
  # push-image:
  #   name: Push Docker Image
  #   needs: build-and-analyze
  #   runs-on: ubuntu-latest
  #   environment: DEV   # ðŸ‘ˆ restrict this job to DEV environment
  #   permissions:
  #     id-token: write
  #     contents: read
    
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4
  #       with:
  #         fetch-depth: 0
  #         ref: ${{ github.ref_name }}
  #     - name: Configure AWS Credentials
  #       uses: aws-actions/configure-aws-credentials@v4
  #       with:
  #         aws-region: ${{ secrets.AWS_ENV_REGION }}
  #         role-to-assume: arn:aws:iam::${{ secrets.AWS_ENV_ACCOUNT }}:role/${{
  #           secrets.AWS_ENV_ROLE }}
  #     - name: Login to Amazon ECR
  #       id: login-ecr
  #       uses: aws-actions/amazon-ecr-login@v2
  #     - name: Setup Docker Buildx
  #       uses: docker/setup-buildx-action@v3
      
  #     - name: Extract Docker metadata
  #       id: meta
  #       uses: docker/metadata-action@v5
  #       with:
  #         flavor: |
  #           latest=false
  #         images: ${{ steps.login-ecr.outputs.registry }}/${{ env.REPOSITORY }}
  #         tags: |
  #           type=semver,priority=900,pattern={{raw}}
  #           type=raw,priority=800,value=${{ needs.build-and-analyze.outputs.image_tag }}
  #         labels: |
  #           org.opencontainers.image.licenses=OGL-UK-3.0

  #     - name: Build and push Docker image manually
  #       run: |
  #         IMAGE_TAG="${{ needs.build-and-analyze.outputs.image_tag }}"
  #         IMAGE_NAME="${{ steps.login-ecr.outputs.registry }}/${{ env.REPOSITORY }}"
          
  #         GIT_COMMIT="${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.revision'] }}"
  #         GIT_URL="${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.source'] }}"
  #         GIT_TITLE="${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.title'] }}"
  #         GIT_VERSION="${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}"
  #         GIT_CREATED="${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}"
  #         GIT_DESCRIPTION="${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.description'] }}"
  #         GIT_LICENSE="${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.licenses'] }}"

  #         echo "Building Docker image $IMAGE_NAME:$IMAGE_TAG"
  #         docker build \
  #           --file ./Dockerfile \
  #           --build-arg GIT_COMMIT="$GIT_COMMIT" \
  #           --label org.opencontainers.image.source="$GIT_URL" \
  #           --label org.opencontainers.image.revision="$GIT_COMMIT" \
  #           --label org.opencontainers.image.title="$GIT_TITLE" \
  #           --label org.opencontainers.image.version="$GIT_VERSION" \
  #           --label org.opencontainers.image.created="$GIT_CREATED" \
  #           --label org.opencontainers.image.description="$GIT_DESCRIPTION" \
  #           --label org.opencontainers.image.licenses="$GIT_LICENSE" \
  #           --tag "$IMAGE_NAME:$IMAGE_TAG" \
  #           .

  #         echo "Pushing Docker image..."
  #         docker push "$IMAGE_NAME:$IMAGE_TAG"

  #     - name: Generate job summary
  #       id: summary
  #       run: >
  #         {
  #           echo "### Docker Image details"
  #           echo "The tag is **${{ needs.build-and-analyze.outputs.image_tag }}**"
  #           echo "| Label      | Value |"
  #           echo "| ---------- | ----- |"
  #           echo "| created    | ${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }} |"
  #           echo "| description| ${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.description'] }} |"
  #           echo "| licenses   | ${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.licenses'] }} |"
  #           echo "| revision   | ${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.revision'] }} |"
  #           echo "| source     | ${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.source'] }} |"
  #           echo "| title      | ${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.title'] }} |"
  #           echo "| url        | ${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.url'] }} |"
  #           echo "| version    | ${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }} |"
  #         } >> $GITHUB_STEP_SUMMARY
  #     - name: Run container locally
  #       run: |
  #         image_tag=${{ needs.build-and-analyze.outputs.image_tag }}
  #         docker build -t bst:$image_tag .
  #         echo "Running local image: $image_tag"
  #         docker run -d --name test-container -p 8080:8080 -e ASPNETCORE_ENVIRONMENT=local bst:$image_tag
  #     - name: Wait for service to start
  #       run: >
  #         echo "Waiting for the service to start..."

  #         for i in {1..10}; do
  #           STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8080/health || echo "000")
  #           echo "HTTP Status: $STATUS"
  #           if [ "$STATUS" -eq 200 ]; then
  #             echo "Service is healthy..."
  #             break
  #           fi
  #           echo "--- Last 5 log lines from container ---"
  #           docker logs test-container --tail 5 || true
  #           echo "---------------------------------------"
  #           sleep 3
  #         done
  #     - name: Test application response
  #       run: |
  #         curl -i http://localhost:8080/health
  #     - name: Cleanup container
  #       if: always()
  #       run: |
  #         docker rm -f test-container

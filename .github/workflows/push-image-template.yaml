name: push image template
on:
  workflow_call:
    inputs:
      IMAGE_VERSION:
        required: true
        type: string
    secrets:
      AWS_ENV_REGION:
        required: true
      AWS_ENV_ACCOUNT:
        required: true
      AWS_ENV_ROLE:
        required: true

permissions: {}   # disables all default permissions
env:
  REPOSITORY: apha/bst
jobs:
  push-image:
    name: Push Docker Image
    runs-on: ubuntu-latest
    environment: DEV   # ðŸ‘ˆ restrict this job to DEV environment
    permissions:
      id-token: write
      contents: write
    
    steps:
      - name: Compose image tag
        id: imgtag
        shell: pwsh
        run: |
          $imageTag = "v${{ github.event.inputs.DEVIMAGEVERSION }}"
          "image_tag=$imageTag" >> $env:GITHUB_OUTPUT

      - name: Print Docker image tag
        shell: pwsh
        run: |
          echo "Image Tag: ${{ steps.imgtag.outputs.image_tag }}"    

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.ref_name }}
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ secrets.AWS_ENV_REGION }}
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ENV_ACCOUNT }}:role/${{
            secrets.AWS_ENV_ROLE }}
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          flavor: |
            latest=false
          images: ${{ steps.login-ecr.outputs.registry }}/${{ env.REPOSITORY }}
          tags: |
            type=semver,priority=900,pattern={{raw}}
            type=raw,priority=800,value=${{steps.imgtag.outputs.image_tag }}
          labels: |
            org.opencontainers.image.licenses=OGL-UK-3.0

      - name: Build and push Docker image manually
        run: |
          IMAGE_TAG="${{ steps.imgtag.outputs.image_tag }}"
          IMAGE_NAME="${{ steps.login-ecr.outputs.registry }}/${{ env.REPOSITORY }}"
          
          GIT_COMMIT="${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.revision'] }}"
          GIT_URL="${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.source'] }}"
          GIT_TITLE="${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.title'] }}"
          GIT_VERSION="${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}"
          GIT_CREATED="${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}"
          GIT_DESCRIPTION="${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.description'] }}"
          GIT_LICENSE="${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.licenses'] }}"

          echo "Building Docker image $IMAGE_NAME:$IMAGE_TAG"
          docker build \
            --file ./Dockerfile \
            --build-arg GIT_COMMIT="$GIT_COMMIT" \
            --label org.opencontainers.image.source="$GIT_URL" \
            --label org.opencontainers.image.revision="$GIT_COMMIT" \
            --label org.opencontainers.image.title="$GIT_TITLE" \
            --label org.opencontainers.image.version="$GIT_VERSION" \
            --label org.opencontainers.image.created="$GIT_CREATED" \
            --label org.opencontainers.image.description="$GIT_DESCRIPTION" \
            --label org.opencontainers.image.licenses="$GIT_LICENSE" \
            --tag "$IMAGE_NAME:$IMAGE_TAG" \
            .

          echo "Pushing Docker image..."
          docker push "$IMAGE_NAME:$IMAGE_TAG"

      - name: Generate job summary
        id: summary
        run: >
          {
            echo "### Docker Image details"
            echo "The tag is **${{steps.imgtag.outputs.image_tag }}**"
            echo "| Label      | Value |"
            echo "| ---------- | ----- |"
            echo "| created    | ${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }} |"
            echo "| description| ${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.description'] }} |"
            echo "| licenses   | ${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.licenses'] }} |"
            echo "| revision   | ${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.revision'] }} |"
            echo "| source     | ${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.source'] }} |"
            echo "| title      | ${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.title'] }} |"
            echo "| url        | ${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.url'] }} |"
            echo "| version    | ${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }} |"
          } >> $GITHUB_STEP_SUMMARY
      - name: Run container locally
        run: |
          image_tag=${{steps.imgtag.outputs.image_tag }}
          docker build -t bst:$image_tag .
          echo "Running local image: $image_tag"
          docker run -d --name test-container -p 8080:8080 -e ASPNETCORE_ENVIRONMENT=local bst:$image_tag
      - name: Wait for service to start
        run: >
          echo "Waiting for the service to start..."

          for i in {1..10}; do
            STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8080/health || echo "000")
            echo "HTTP Status: $STATUS"
            if [ "$STATUS" -eq 200 ]; then
              echo "Service is healthy..."
              break
            fi
            echo "--- Last 5 log lines from container ---"
            docker logs test-container --tail 5 || true
            echo "---------------------------------------"
            sleep 3
          done
      - name: Test application response
        run: |
          curl -i http://localhost:8080/health
      - name: Cleanup container
        if: always()
        run: |
          docker rm -f test-container


      - name: Create and push git tag
        env:
          IMAGE_TAG: ${{ steps.imgtag.outputs.image_tag }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # Create the tag only if it doesn't already exist
          if git ls-remote --tags origin | grep -q "refs/tags/$IMAGE_TAG"; then
            echo "Tag $IMAGE_TAG already exists. error..."
            exit 1
          else
            echo "Creating and pushing tag $IMAGE_TAG"
            git tag "$IMAGE_TAG"
            git push origin "$IMAGE_TAG"
          fi    

name: Create PROD Application Release
on:
  workflow_dispatch:
    inputs:
      RELEASEVERSION:
        description: 'PROD Application Release Version'
        type: string
        required: true

env:
  REPOSITORY: apha/bst
jobs:
  push-image:
    name: Retag & Push Docker Image
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    environment: ${{ github.event.inputs.environment }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.ref_name }}
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ secrets.AWS_ENV_REGION }}
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ENV_ACCOUNT }}:role/${{ secrets.AWS_ENV_ROLE }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Compose image tags
        id: imgtag
        run: |
          DEV_TAG="v${{ github.event.inputs.RELEASEVERSION }}-dev"

          case "${{ github.event.inputs.environment }}" in
            test)
              FINAL_TAG="v${{ github.event.inputs.RELEASEVERSION }}-tst"
              ;;
            preprod)
              FINAL_TAG="v${{ github.event.inputs.RELEASEVERSION }}-pre"
              ;;
            prod)
              FINAL_TAG="v${{ github.event.inputs.RELEASEVERSION }}"
              ;;
          esac

          echo "dev_tag=$DEV_TAG" >> $GITHUB_OUTPUT
          echo "final_tag=$FINAL_TAG" >> $GITHUB_OUTPUT

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          flavor: |
            latest=false
          images: ${{ steps.login-ecr.outputs.registry }}/${{ env.REPOSITORY }}
          tags: |
            type=semver,priority=900,pattern={{raw}}
            type=raw,priority=800,value=${{ needs.build-and-analyze.outputs.image_tag }}
          labels: |
            org.opencontainers.image.licenses=OGL-UK-3.0

      - name: Build and push Docker image manually
        run: |
          IMAGE_TAG="${{ steps.imgtag.outputs.final_tag }}"
          IMAGE_NAME="${{ steps.login-ecr.outputs.registry }}/${{ env.REPOSITORY }}"
          
          GIT_COMMIT="${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.revision'] }}"
          GIT_URL="${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.source'] }}"
          GIT_TITLE="${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.title'] }}"
          GIT_VERSION="${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}"
          GIT_CREATED="${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}"
          GIT_DESCRIPTION="${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.description'] }}"
          GIT_LICENSE="${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.licenses'] }}"

          echo "Building Docker image $IMAGE_NAME:$IMAGE_TAG"
          docker build \
            --file ./Dockerfile \
            --build-arg GIT_COMMIT="$GIT_COMMIT" \
            --label org.opencontainers.image.source="$GIT_URL" \
            --label org.opencontainers.image.revision="$GIT_COMMIT" \
            --label org.opencontainers.image.title="$GIT_TITLE" \
            --label org.opencontainers.image.version="$GIT_VERSION" \
            --label org.opencontainers.image.created="$GIT_CREATED" \
            --label org.opencontainers.image.description="$GIT_DESCRIPTION" \
            --label org.opencontainers.image.licenses="$GIT_LICENSE" \
            --tag "$IMAGE_NAME:$IMAGE_TAG" \
            .

          echo "Pushing Docker image..."
          docker push "$IMAGE_NAME:$IMAGE_TAG"

      - name: Generate job summary
        id: summary
        run: >
          {
            echo "### Docker Image details"
            echo "The tag is **${{ steps.imgtag.outputs.final_tag }}**"
            echo "| Label      | Value |"
            echo "| ---------- | ----- |"
            echo "| created    | ${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }} |"
            echo "| description| ${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.description'] }} |"
            echo "| licenses   | ${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.licenses'] }} |"
            echo "| revision   | ${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.revision'] }} |"
            echo "| source     | ${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.source'] }} |"
            echo "| title      | ${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.title'] }} |"
            echo "| url        | ${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.url'] }} |"
            echo "| version    | ${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }} |"
          } >> $GITHUB_STEP_SUMMARY  
      
      # - name: Retag & Push Docker Image
      #   run: |
      #     IMAGE_NAME="${{ steps.login-ecr.outputs.registry }}/${{ env.REPOSITORY }}"
      #     DEV_TAG="${{ steps.imgtag.outputs.dev_tag }}"
      #     FINAL_TAG="${{ steps.imgtag.outputs.final_tag }}"

      #     echo "Pulling source image: $IMAGE_NAME:$DEV_TAG"
      #     docker pull "$IMAGE_NAME:$DEV_TAG"

      #     echo "Tagging as: $IMAGE_NAME:$FINAL_TAG"
      #     docker tag "$IMAGE_NAME:$DEV_TAG" "$IMAGE_NAME:$FINAL_TAG"

      #     echo "Pushing Docker image..."
      #     docker push "$IMAGE_NAME:$FINAL_TAG"
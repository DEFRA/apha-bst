name: Create PROD Application Release
on:
  workflow_dispatch:
    inputs:
      APPLICATIONRELEASEVERSION:
        description: 'PROD Application Release Version Expected format: major.minor.patch'
        type: string
        required: true
      APPLICATIONRELEASENOTES:
        description: 'Notes to include in the release body'
        type: string
        required: true
    

env:
  REPOSITORY: apha/bst
jobs:
  application-release:
    name: prod-application-release
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: write

    steps:
      - name: Checkout main
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0
          persist-credentials: true

      - name: Validate VERSION format (major.minor.patch)
        shell: bash
        run: |
          VERSION="${{ github.event.inputs.APPLICATIONRELEASEVERSION }}"
          # 1) Match X.Y.Z where each is 0..999, no leading zeros (except the single zero)
          if [[ ! "$VERSION" =~ ^(0|[1-9][0-9]{0,2})\.(0|[1-9][0-9]{0,2})\.(0|[1-9][0-9]{0,2})$ ]]; then
            echo "Invalid VERSION: $VERSION"
            echo "Expected: major.minor.patch where each is 0â€“999 without leading zeros (e.g., 1.0.0, 0.9.12)."
            exit 1
          fi
          # 2) Disallow the all-zero version explicitly
          if [[ "$VERSION" == "0.0.0" ]]; then
            echo "Invalid VERSION: 0.0.0 is not allowed."
            exit 1
          fi

          echo "VERSION=$VERSION" >> "$GITHUB_ENV"

      - name: Get latest tag
        id: get_tag
        run: |
          LATEST_TAG=$(git describe --tags --abbrev=0)
          echo "Latest tag: $LATEST_TAG"
          echo "tag=$LATEST_TAG" >> $GITHUB_OUTPUT

      
      - name: Create/Update GitHub Release for latest tag
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.get_tag.outputs.tag }}
          name: "Application Release v${{ env.VERSION }}"
          body: |
            ðŸ“¦ **Image Tag used for deployment:** `${{ steps.get_tag.outputs.tag }}`
             ---
            ${{ github.event.inputs.APPLICATIONRELEASENOTES }}
            ---
            
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

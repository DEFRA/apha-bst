name: Create PROD Application Release
on:
  workflow_dispatch:
    inputs:
      APPLICATIONRELEASEVERSION:
        description: 'PROD Application Release Version Expected format: major.minor.patch'
        type: string
        required: true

env:
  REPOSITORY: apha/bst
jobs:
  application-release:
    name: prod-application-release
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: write

    steps:

      - name: Validate VERSION format (major.minor.patch)
        shell: bash
        run: |
          VERSION="${{ github.event.inputs.APPLICATIONRELEASEVERSION }}"
          # 1) Match X.Y.Z where each is 0..999, no leading zeros (except the single zero)
          if [[ ! "$VERSION" =~ ^(0|[1-9][0-9]{0,2})\.(0|[1-9][0-9]{0,2})\.(0|[1-9][0-9]{0,2})$ ]]; then
            echo "Invalid VERSION: $VERSION"
            echo "Expected: major.minor.patch where each is 0â€“999 without leading zeros (e.g., 1.0.0, 0.9.12)."
            exit 1
          fi
          # 2) Disallow the all-zero version explicitly
          if [[ "$VERSION" == "0.0.0" ]]; then
            echo "Invalid VERSION: 0.0.0 is not allowed."
            exit 1
          fi

          echo "VERSION=$VERSION" >> "$GITHUB_ENV"
          echo "TAG=v$VERSION" >> "$GITHUB_ENV"

      - name: Derive tag from VERSION
        id: ver
        run: |
          VER="${{ github.event.inputs.VERSION }}"
          TAG="v$VER"
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "ver=$VER" >> $GITHUB_OUTPUT
          echo "Using tag: $TAG (version: $VER)"

      - name: Fail if tag already exists
        run: |
          if git ls-remote --tags origin "${{ steps.ver.outputs.tag }}" | grep -q . ; then
            echo "Tag ${{ steps.ver.outputs.tag }} already exists on origin. Aborting."
            exit 1
          fi      

      - name: Create and push tag on main
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git tag -a "${TAG}" -m "Release ${TAG}"
          git push "https://x-access-token:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git" "${TAG}"


      - name: Read VERSION file
        id: version_file
        run: echo "VERSION_FILE=$(cat VERSION)" >> $GITHUB_ENV

      - name: Create GitHub Release (with source archive)
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.TAG }}
          name: ${{ env.TAG }}
          generate_release_notes: true
          body: |
            This release marks the availability of `${{ env.TAG }}`.

            ---

            ðŸ“¦ **Image Tag used for deployment:** `v${{ env.VERSION_FILE }}`
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}          
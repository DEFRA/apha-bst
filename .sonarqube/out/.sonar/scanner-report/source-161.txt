using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Apha.BST.Core.Entities;
using Apha.BST.DataAccess.Data;
using Apha.BST.DataAccess.Repositories;
using Apha.BST.DataAccess.UnitTests.Helpers;

namespace Apha.BST.DataAccess.UnitTests.AuditlogArchivedRepositoryTest
{
    public class AbstractAuditlogArchivedRepositoryTest : AuditlogArchivedRepository
    {
        private readonly IQueryable<AuditlogArchived>? _archivedLogs;
        private readonly IQueryable<StoredProcedureList>? _spLists;

        public AbstractAuditlogArchivedRepositoryTest(
            BstContext context,
            IQueryable<AuditlogArchived>? archivedLogs = null,
            IQueryable<StoredProcedureList>? spLists = null)
            : base(context)
        {
            _archivedLogs = archivedLogs;
            _spLists = spLists;
        }

        protected override IQueryable<T> GetDbSetFor<T>()
        {
            if (typeof(T) == typeof(AuditlogArchived) && _archivedLogs != null)
                return new TestAsyncEnumerable<AuditlogArchived>(_archivedLogs).Cast<T>();
            throw new System.NotImplementedException($"No override for type {typeof(T).Name}");
        }

        protected override IQueryable<T> GetQueryableResultFor<T>(string sql, params object[] parameters)
        {
            if (typeof(T) == typeof(StoredProcedureList) && _spLists != null)
                return new TestAsyncEnumerable<StoredProcedureList>(_spLists).Cast<T>();
            throw new System.NotImplementedException($"No override for type {typeof(T).Name}");
        }
    }
}

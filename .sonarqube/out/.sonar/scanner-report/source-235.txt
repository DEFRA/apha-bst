using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Apha.BST.Application.DTOs;
using Apha.BST.Application.Interfaces;
using Apha.BST.Core.Entities;
using Apha.BST.Core.Interfaces;
using Apha.BST.DataAccess.Repositories;
using AutoMapper;

namespace Apha.BST.Application.Services
{
    public class UserService : IUserService
    {
        private readonly IUserRepository _userRepository;
        private readonly IMapper _mapper;

        public UserService(IUserRepository userRepository, IMapper mapper)
        {
            _userRepository = userRepository;
            _mapper = mapper;
        }

        public async Task<string> AddUserAsync(UserDto dto)
        {
            var user = _mapper.Map<User>(dto);
            await _userRepository.AddUserAsync(user);

            // Get location as string representation
            var locations = await GetLocationsAsync();
            var userLocation = locations.FirstOrDefault(l => l.LocId == dto.UserLoc)?.VlaLocation ?? "Unknown";

            return $"{dto.UserName}: {dto.UserId} from {userLocation} has been added as a level {dto.UserLevel} user";
        }

        public async Task<List<VlaLocDto>> GetLocationsAsync()
        {
            var locationViews = await _userRepository.GetLocationsAsync();
            return _mapper.Map<List<VlaLocDto>>(locationViews);
        }

        public async Task<List<UserViewDto>> GetUsersAsync(string userId)
        {
            var users = await _userRepository.GetUsersAsync(userId);
            return _mapper.Map<List<UserViewDto>>(users);
        }
        public async Task<string> UpdateUserAsync(UserDto dto)
        {
            var user = _mapper.Map<User>(dto);
            await _userRepository.UpdateUserAsync(user);

            // Get readable location from the updated result
            var users = await _userRepository.GetUsersAsync(dto.UserId);
            var updatedUser = users.FirstOrDefault();
            var userLocText = updatedUser?.VlaLocation ?? "Unknown";
            var userLevelText = updatedUser?.UserLevelName ?? "Unknown";

            // Updated message
            var message = $"{dto.UserId} details have changed: {dto.UserName}; {userLocText}; {userLevelText}";
            return message;
        }

        public async Task<UserDto?> GetUserByIdAsync(string userId)
        {
            var users = await _userRepository.GetUsersAsync(userId);
            var userView = users.FirstOrDefault();

            if (userView == null)
                return null;

            // Map from UserView to UserDto
            var userDto = new UserDto
            {
                UserId = userView.UserId,
                UserName = userView.UserName,
                UserLoc = userView.UserLoc,
                UserLevel = userView.UserLevel
            };

            return userDto;
        }

        public async Task<string> DeleteUserAsync(string userId)
        {
            var users = await _userRepository.GetUsersAsync(userId);
            var user = users.FirstOrDefault();
            if (user == null)
                return $"User with ID {userId} not found.";

            await _userRepository.DeleteUserAsync(userId);

            var message = $"{user.UserId} - {user.UserName} has been deleted from the database";
            return message;
        }

    }
}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Apha.BST.Core.Entities;
using Apha.BST.DataAccess.Data;
using Apha.BST.DataAccess.Repositories;

namespace Apha.BST.DataAccess.UnitTests.UserRepositoryTest
{
    public class AbstractUserRepositoryTest(
        BstContext context,
        IQueryable<User>? users = null,
        IQueryable<UserView>? userViews = null,
        IQueryable<VlaLocView>? vlaLocViews = null) : UserRepository(context)
    {
        private readonly IQueryable<User>? _users = users;
        private readonly IQueryable<UserView>? _userViews = userViews;
        private readonly IQueryable<VlaLocView>? _vlaLocViews = vlaLocViews;

        protected override IQueryable<T> GetDbSetFor<T>()
        {
            if (typeof(T) == typeof(User) && _users != null)
                return (IQueryable<T>)_users;
            throw new NotImplementedException($"No override for type {typeof(T).Name}");
        }

        protected override IQueryable<T> GetQueryableResultFor<T>(string sql, params object[] parameters)
        {
            if (typeof(T) == typeof(UserView) && _userViews != null)
                return (IQueryable<T>)_userViews;
            if (typeof(T) == typeof(VlaLocView) && _vlaLocViews != null)
                return (IQueryable<T>)_vlaLocViews;
            throw new NotImplementedException($"No override for type {typeof(T).Name}");
        }
    }
}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Apha.BST.Core.Entities;
using Apha.BST.DataAccess.Data;
using Moq;

namespace Apha.BST.DataAccess.UnitTests.AccessControlRepositoryTest
{
    public class AccessControlRepositoryTests
    {
        [Fact]
        public async Task GetRoleIdAndUsernameByEmailAsync_ReturnsRoleIdAndUsername_WhenUserExists()
        {
            var userRoleInfos = new List<UserRoleInfo>
            {
                new UserRoleInfo { UserName = "testuser", UserLevel = 2 }
            }.AsQueryable();

            var mockContext = new Mock<BstContext>();
            var repo = new AbstractAccessControlRepositoryTest(mockContext.Object, userRoleInfos);

            var result = await repo.GetRoleIdAndUsernameByEmailAsync("test@example.com");

            Assert.NotNull(result);
            Assert.Equal(2, (double)result.Value.RoleId!);
            Assert.Equal("testuser", result.Value.Username);
        }

        [Fact]
        public async Task GetRoleIdAndUsernameByEmailAsync_ReturnsNull_WhenNoUser()
        {
            var userRoleInfos = new List<UserRoleInfo>().AsQueryable();

            var mockContext = new Mock<BstContext>();
            var repo = new AbstractAccessControlRepositoryTest(mockContext.Object, userRoleInfos);

            var result = await repo.GetRoleIdAndUsernameByEmailAsync("notfound@example.com");

            Assert.Null(result);
        }

        [Fact]
        public async Task GetRoleIdAndUsernameByEmailAsync_ReturnsNull_WhenFirstItemIsNull()
        {
            var userRoleInfos = new List<UserRoleInfo?> { null }.AsQueryable();

            var mockContext = new Mock<BstContext>();
            var repo = new AbstractAccessControlRepositoryTest(mockContext.Object, userRoleInfos!);

            var result = await repo.GetRoleIdAndUsernameByEmailAsync("nullitem@example.com");

            Assert.Null(result);
        }
    }
}

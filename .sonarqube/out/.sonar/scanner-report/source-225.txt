using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Apha.BST.Application.DTOs;
using Apha.BST.Application.Interfaces;
using Apha.BST.Application.Pagination;
using Apha.BST.Core.Interfaces;
using Apha.BST.Core.Pagination;
using AutoMapper;

namespace Apha.BST.Application.Services
{
    public class AuditlogArchivedService :IAuditlogArchivedService
    {
        private readonly IAuditlogArchivedRepository _auditLogArchiveRepository;
        private readonly IMapper _mapper;
        public AuditlogArchivedService(IAuditlogArchivedRepository auditLogArchiveRepository, IMapper mapper)
        {
            _auditLogArchiveRepository = auditLogArchiveRepository;
            _mapper = mapper ?? throw new ArgumentNullException(nameof(mapper));
        }
        public async Task<PaginatedResult<AuditLogArchivedDto>> GetArchiveAuditLogsAsync(QueryParameters filter, string storedProcedure)
        {
            var queryFilter = _mapper.Map<PaginationParameters>(filter);
            var auditLogs = await _auditLogArchiveRepository.GetArchiveAuditLogsAsync(queryFilter, storedProcedure);
            return _mapper.Map<PaginatedResult<AuditLogArchivedDto>>(auditLogs);

        }
        public async Task<List<string>> GetStoredProcedureNamesAsync()
        {
            return await _auditLogArchiveRepository.GetStoredProcedureNamesAsync();
        }
    }
}

using Microsoft.AspNetCore.Mvc.Rendering;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Apha.BST.Application.UnitTests.RoleMappingServiceTest
{
    public class RoleMappingServiceTests : AbstractRoleMappingServiceTest
    {
        [Theory]
        [InlineData(1, "Superuser")]
        [InlineData(2, "Data entry")]
        [InlineData(3, "Read only")]
        public async Task GetRoleName_ValidRoleId_ReturnsCorrectRoleName(byte roleId, string expectedRoleName)
        {
            await MockForAssertGetRoleName(roleId, expectedRoleName);
        }

        [Fact]
        public async Task GetRoleName_InvalidRoleId_ReturnsUnknownRole()
        {
            byte invalidRoleId = 4;
            await MockForAssertGetRoleName(invalidRoleId, "Unknown Role");
        }

        [Theory]
        [InlineData(0)]
        [InlineData(255)]
        public async Task GetRoleName_EdgeCases_ReturnsUnknownRole(byte roleId)
        {
            await MockForAssertGetRoleName(roleId, "Unknown Role");
        }

        [Fact]
        public void GetUserLevels_ReturnsCorrectListOfSelectListItems()
        {
            var expectedItems = new List<SelectListItem>
        {
            new SelectListItem { Value = "1", Text = "Level 1 - Superuser" },
            new SelectListItem { Value = "2", Text = "Level 2 - Data entry" },
            new SelectListItem { Value = "3", Text = "Level 3 - Read only" }
        };

            MockForAssertGetUserLevels(expectedItems);
        }
        [Fact]
        public void GetUserLevels_ReturnsListOfSelectListItems()
        {
            MockForAssertUserLevels(result => Assert.IsType<List<SelectListItem>>(result));
        }

        [Fact]
        public void GetUserLevels_ReturnsExactlyThreeItems()
        {
            MockForAssertUserLevels(result => Assert.Equal(3, result.Count));
        }

        [Fact]
        public void GetUserLevels_ReturnsCorrectValueAndTextProperties()
        {
            MockForAssertUserLevels(result =>
            {
                Assert.Collection(result,
                    item =>
                    {
                        Assert.Equal("1", item.Value);
                        Assert.Equal("Level 1 - Superuser", item.Text);
                    },
                    item =>
                    {
                        Assert.Equal("2", item.Value);
                        Assert.Equal("Level 2 - Data entry", item.Text);
                    },
                    item =>
                    {
                        Assert.Equal("3", item.Value);
                        Assert.Equal("Level 3 - Read only", item.Text);
                    }
                );
            });
        }
    }
}
